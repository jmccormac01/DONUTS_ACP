<?xml version="1.0" ?>
<package>
	<comment>
<![CDATA[
'tabs=4
-----------------------------------------------------------------------------------------

ACP Custom User Actions Component Framework - JScript Version
=============================================================

Script:         UserActions.wsc
Author:         Robert B. Denny <rdenny@dc3.com>
Version:        8.1
Requires:       ACP 8.1 or later
                Windows Script 5.6 or later (installed by ACP setup)

Environment:    This is a Windows Script Component. Once registered (see below) it
                provides ACP standard scripts with a set of user-written actions that 
                can be performed at several points during the execution of ACP's
                standard scripts.  If you don't have a copy of PrimalScript, I STRONGLY
                suggest you get it and use it to work with this WSC, and ACP scripting
                in general!
                
                http://www.sapien.com/primalscript.aspx
                
Activating:     Normally, ACP does not "see" this component and it's member functions. 
                To activate it for ACP it must be registered with the Windows OS. This
                is simple on 32-bit systems: Right click on UserActions.wsc and select
                Register. If you see a success popup, it's ready to go. If you see a 
                failure popup, there is a mistake in the code or XML.
                
                On 64-bit systems it's a bit more complicated, as UserActions must be
                registered with the 32-bit siubsystem of Windows:
                
                    1. Run C:\Windows\SysWOW64\cmd.exe           <--- Yes, SysWOW64!
                    2. ...> CD "\Program Files\ACP Obs Control"  <-- Note quotes
                    3. ...> regsvr32 UserActions.wsc
                
Usage:          Add your custom script actions to the empty methods below. Access to
                ACP's "Util" object is automatically included. 
                
                To write to the ACP console, call Util.Console.PrintLine(). 
                
                To control the telescope and camera, you MUST use Util.ScriptTelescope 
                and Util.ScriptCamera. DO NOT CREATE INSTANCES OF ACP.TELESCOPE, 
                MAXIM.CCDCAMERA, OR ACP.CAMERA! This will prevent access locks from 
                working properly.
                
                You have access to all global variables in the host ACP script via 
                the Util.Script property. DO NOT CHANGE GLOBALS IN THE HOST SCRIPT,
                as it may cause it to fail.
                
                You have access to all of the facilities in AcquireSupport.wsc. To
                call any of its methods or access any of its properties, use 
                Util.Script.SUP to access the script's global variable that holds the
                object reference to the support library.
                
Edit History:
    07-Sep-04   4.0 Fix comments on some methods (cut-n-paste error)
    11-Feb-06   4.2 - Add separate #USERACTIONxxx metnods for before and after, the 
                after action now passes the final image file pathname. Add comments  
                to ImageAfter() warning not to rename or move the file. Add object
                Scripting.FileSystemObject as FSO. Add ImageComplete(), where you can
                safely change the file name. Fix interface for SlewStart(). 
                Add and clarify comments. Remove template for #USERACTxxx, add new
                standard actions TargetStart(), TargetEnd().
    28-Jun-06   4.3 - Add Shutdown() method.
    24-Nov-06   5.0 - Change TargetStart and TargetEnd to pass Plan plus current Target
                nd next Target as parameters. 
    17-Jun-07   5.1 TargetStart can now skip targets, see context comments.
    07-Nov-11   No logic change, GEM:732 add notation on registering including for 64 bit
                Remove old startup/shutdown notation.
    28-Apr-16   8.1 - GEM:1458 Add AcquireImage user action.
    13-Apr-18   Adds TargetStart and TargetEnd support for triggering Donuts - JMCC
    14-Apr-18   Spotted script was mix of VBSCRIPT & JSCRIPT, ported it to JScript - JMCC
    29-Apr-18   Settled on final layout, TargetStart() and ScriptEnd() to handle donuts - JMCC
-----------------------------------------------------------------------------------------
]]>
	</comment>
	<component id="UserActions">
		<?component error="false" debug="false" ?>
		<registration progid="ACP.UserActions" classid="{33F9198D-112D-4AB9-8951-F5D7FB5E79AA}" description="ACP custom user action methods" remotable="no" version="1.0">
		</registration>
		<public>
			<method name="ImageComplete">
				<parameter name="ImageFile"/>
			</method>
			<method name="ImageEnd">
				<parameter name="ImageFile"/>
			</method>
			<method name="ImageStart">
				<parameter name="Interval"/>
				<parameter name="Binning"/>
				<parameter name="Subframe"/>
				<parameter name="FilterNum"/>
				<parameter name="ForPointing"/>
			</method>
			<method name="AcquireImage">
				<parameter name="Plan"/>
				<parameter name="Target"/>
				<parameter name="ImageSet"/>
				<parameter name="ImageFile"/>
			</method>
			<method name="ScriptEnd">
			</method>
			<method name="ScriptStart">
			</method>
			<method name="Shutdown">
			</method>
			<method name="SlewEnd">
			</method>
			<method name="SlewStart">
				<parameter name="RightAscension"/>
				<parameter name="Declination"/>
			</method>
			<method name="TargetStart">
				<parameter name="Plan"/>
				<parameter name="Target"/>
				<parameter name="NextTarget"/>
			</method>
			<method name="TargetEnd">
				<parameter name="Plan"/>
				<parameter name="Target"/>
				<parameter name="NextTarget"/>
			</method>
		</public>
		<object id="FSO" progid="Scripting.FileSystemObject" events="false" reference="false"/>
		<object id="ACPApp" progid="ACP.Application" events="false" reference="true"/>
		<object id="Util" progid="ACP.Util" events="false" reference="false"/>
		<script id="UserActions" language="JScript">
<![CDATA[

//------------------------------------------------------------------------------
// startDonuts()     Called if TAG Donuts=true
//
// Parameters:
//   None:
//
// Return True to continue ACP script, False to stop ACP script
//------------------------------------------------------------------------------
function startDonuts(){
    var Console = Util.Console;
    Console.PrintLine("Starting donuts...");
    var pyPath = "\"C:\\ProgramData\\Miniconda3\\envs\\snakes\\python.exe\"";
    var guideScript = "\"C:\\Users\\speculoos\\Documents\\GitHub\\DONUTS_ACP\\donuts_process.py\" \"start\""
    // this is a dummy string for the log, it's not actually run
    var fullString = pyPath + " " +  guideScript;
    Console.PrintLine(fullString);
    // make the string to execute
    var TID = Util.ShellExec(pyPath,  guideScript);
    var timeout = 60;
    while(Util.IsTaskActive(TID))
    {
        Util.WaitForMilliseconds(1000);
        timeout = timeout - 1;
        if (timeout <= 0)
        {
            Util.Console.PrintLine("Donuts start command never exited!");
            return "";
        }
    }
    var exStat = Util.GetTaskExitStatus(TID);
    if (exStat == 0){
        Console.PrintLine("Donuts started successfully...");
        return true;
    } else if (exStat == 1){
        Util.Console.PrintLine("donuts_process.py failed to start guiding (exit status=1)");
        Util.Console.PrintLine("Observations will continue with NO AUTOGUIDING");
        return true;
    } else if (exStat == 2){
        Util.Console.PrintLine("donuts_process.py Unknown request (exit status=2)");
        Util.Console.PrintLine("Observations will continue with NO AUTOGUIDING");
        return true;
    } else if (exStat == 3){
        Util.Console.PrintLine("donuts_process.py Pyro communications error (exit status=3)");
        Util.Console.PrintLine("Observations will continue with NO AUTOGUIDING");
        return true;
    } else if (exStat == 4){
        Util.Console.PrintLine("donuts_process.py Donuts already running (exit status=4)");
        Util.Console.PrintLine("Observations will continue using previous Donuts AG job");
        return true;
    } else {
        Util.Console.PrintLine("donuts_process.py Unknown error (exit status=UNKNOWN)");
        Util.Console.PrintLine("Observations will continue with NO AUTOGUIDING");
        return true;
    }
}

//------------------------------------------------------------------------------
// stopDonuts()     Called at the end of a target who's TAG is Donuts=true
//
// Parameters:
//   None:
//
// Return True to continue ACP script, False to stop ACP script
//------------------------------------------------------------------------------
function stopDonuts(){
    var Console = Util.Console;
    Console.PrintLine("Stopping donuts...");
    var pyPath = "\"C:\\ProgramData\\Miniconda3\\envs\\snakes\\python.exe\"";
    var guideScript = "\"C:\\Users\\speculoos\\Documents\\GitHub\\DONUTS_ACP\\donuts_process.py\" \"stop\""
    // this is a dummy string for the log, it's not actually run
    var fullString = pyPath + " " +  guideScript;
    Console.PrintLine(fullString);
    // make the string to execute
    var TID = Util.ShellExec(pyPath,  guideScript);
    var timeout = 60;
    while(Util.IsTaskActive(TID))
    {
        Util.WaitForMilliseconds(1000);
        timeout = timeout - 1;
        if (timeout <= 0)
        {
            Util.Console.PrintLine("Donuts stop command never exited!");
            return "";
        }
    }
    var exStat = Util.GetTaskExitStatus(TID);
    if (exStat == 0){
        Console.PrintLine("Donuts stopped successfully...");
        return true;
    } else if (exStat == 1){
        Util.Console.PrintLine("donuts_process.py failed to stop guiding (exit status=1)");
        return true;
    } else if (exStat == 2){
        Util.Console.PrintLine("donuts_process.py Unknown request (exit status=2)");
        return true;
    } else if (exStat == 3){
        Util.Console.PrintLine("donuts_process.py Pyro communications error (exit status=3)");
        return true;
    } else {
        Util.Console.PrintLine("donuts_process.py Unknown error (exit status=UNKNOWN)");
        return true;
    }
}

//------------------------------------------------------------------------------
// ScriptStart()     Called at start of script execution
//
// Parameters:
//   None:
//
// Return True to continue ACP script, False to stop ACP script
//------------------------------------------------------------------------------
function ScriptStart(){
    Util.Console.PrintLine(" Modified UserActions for DONUTS is in effect");
    return true;
}


//------------------------------------------------------------------------------
// ScriptEnd()       Called at the end of script execution
//
// Parameters:
//   None
//
// No return. THIS WILL NOT BE CALLED ON A SCRIPT ERROR
//------------------------------------------------------------------------------
function ScriptEnd(){
    var Console = Util.Console;
    Console.PrintLine("Custom UserAction for ScriptEnd called");
    // stop donuts regardless to be safe
    // this is the end of the plan so no error handling needed
    var stopped = stopDonuts();
    if (stopped === ""){
        Console.PrintLine("**ERR: Failed to stop donuts**");
    }
    return;
}


//------------------------------------------------------------------------------
// SlewStart()       Called prior To starting a slew
//
// Parameters:
//   RightAscension:     J2000 right ascension of slew destination
//   Declination:        J2000 declination of slew destination
//
// Return True to permit the slew. False will prevent the slew and cause the 
// script to stop with an error.
//------------------------------------------------------------------------------
function SlewStart(RightAscension, Declination){
    //Util.Console.PrintLine(" [useraction] SlewStart called");
    return true;
}

//------------------------------------------------------------------------------
// SlewEnd()         Called when a slew has ended
//
// Parameters:
//   None
//
// Return True to permit the script to continue. Returning False will cause the 
// script to stop with an error.
//------------------------------------------------------------------------------
function SlewEnd(){
    //Util.Console.PrintLine(" [useraction] SlewEnd called");
    return true;
}

//------------------------------------------------------------------------------
// ImageStart()      Called just before image acquisition
//
// Parameters:
//   Interval:       Exposure interval (sec, 0=bias, neg=dark)   (read/write)
//   Binning:        Binning level                               (read/write)
//   Subframe:       Subframe size (fractional)                  (read/write)
//   FilterNum:      Filter number                               (DO NOT CHANGE!!!!!)
//   ForPointing     True if this is pointing exp.               (DO NOT CHANGE!!!!!)
//
// Return True to permit the script to continue. Returning False will cause the 
// script to stop with an error.
//------------------------------------------------------------------------------
function ImageStart(Interval, Binning, Subframe, FilterNum, ForPointing){
    //Util.Console.PrintLine(" [useraction] ImageStart called");
    return true;
}

//------------------------------------------------------------------------------
// ImageEnd()        Called when image acquisition has ended
//
// Parameters:
//   ImageFile:      Full path/name to image file
//
// Return True to permit the script to continue. Returning False will cause the 
// script to stop with an error.
//
// NOTE: DO NOT RENAME OR MOVE THE FILE HERE IF YOU ARE USING THIS WITH
//       ACQUIREIMAGES. USE #IMAGECOMPLETE (BELOW), WHICH RUNS AFTER
//       ACQUIREIMAGES IS COMPLETELY FINISHED WITH THE IMAGE FILE (EXCEPT
//       For AUTOSTACKING. SEE NOTE BELOW!)
//------------------------------------------------------------------------------
function ImageEnd(ImageFile){
    Util.Console.PrintLine(" Custom UserAction for ImageEnd called");
    var PL = new ActiveXObject("PinPoint.Plate");
    var FMxF = new ActiveXObject("FocusMax.Focuser");
    PL.AttachFITS(ImageFile);
    PL.WriteFITSDouble("FOCUSTEM", FMxF.Temperature, 1);
    PL.WriteFITSDouble("FOCUSPOS", FMxF.Position, 0);
    PL.UpdateFITS();
    PL.DetachFITS();
    FMxF = null;
    PL = null;
    return true;
}

//------------------------------------------------------------------------------
// Shutdown()        Called by AcquireSupport when its Shutdown method is called
//
// Parameters:
//   None
//
// Return True if you handle observatory shutdown here. If you return False,
// AcquireSupport will run its built-in parking and camera warmup code.
//------------------------------------------------------------------------------
function Shutdown(){
    //Util.Console.PrintLine(" [useraction] Shutdown called");
    return false;                            // Use built-in shutdown logic
}

//------------------------------------------------------------------------------
// AcquireImage()    Called From AcquireImages.js to acquire an image using 
//                   special logic that completely replaces the acquisition
//                   logic in AcquireImages. Also called from AcquireScheduler
//                   for Scheduler runs.
//
// Parameters (ACP):
//   Plan            ACP.Plan object for currently running plan
//   Target          Current ACP.Target object 
//   ImageSet        Current ACP.ImageSet object
//   ImageFile:      Full path/name to image file
//
// Parameters (Scheduler):
//   Plan            Scheduler Plan object for currently running plan
//   Target          Scheduler Observation object for target
//   ImageSet        Scheduler ImageSet object for this set of images
//   ImageFile:      Full path/name to image file
//
// Environment:
//   The scope is pointing to the target folloowing a pointing update as needed,
//   and any periodic or adaptive autofocus has been done. Nothing else will
//   have been done. If this function does handle the imaging, then it is 
//   responsible for guiding, filter selection, and image acquisition. When
//   it returns, it is assumed that the image file is at the given path (which
//   will be constructed as usual including possible ImageFileConfig customizations. 
//
// Return True to permit the script to continue and acquire an image the normal
// way in AcquireSupport. Returning False will cause the script to stop with 
// an error. Returning the string "ok" will cause the internal AcquireImages
// logic to be skipped, and loop back in the "Count" loop for the next iteration.
//
//------------------------------------------------------------------------------
function AcquireImage(Plan, Target, ImageSet, ImageFile){
    //Util.Console.PrintLine(" [useraction] AcquireImage called");
    return true;
}

//------------------------------------------------------------------------------
// ImageComplete()   Called From AcquireImages.js when normal image acquisition
//                   and processing are complete. 
//
// Parameters:
//   ImageFile:      Full path/name to image file                (read/write)
//
// Return True to permit the script to continue. Returning False will cause the 
// script to stop with an error. At this point, the image processing is done
// so you may change the image file name.
//
// WARNINGS: 
//   (1) DO NOT CHANGE FILE EXTENSION! IT MUST BE .FTS.
//   (2) IF YOU CHANGE THE FILE NAME, AUTO_STACK WILL BE DISABLED
//------------------------------------------------------------------------------
function ImageComplete(ImageFile){
    //Util.Console.PrintLine(" [useraction] ImageComplete called");
    return true;
}

//------------------------------------------------------------------------------
// TargetStart() Called from AcquireImages.js when a new target is about to 
//               start. Also called from AcquireScheduler for ACP Scheduler runs.
//
// Parameters (ACP):
//   Plan            ACP.Plan object for currently running plan
//   Target          Current ACP.Target object 
//   NextTarget      Next ACP.Target object Or Null
//
// Parameters (Scheduler):
//   Plan            Scheduler Plan object for currently running plan
//   Target          Scheduler Observation object for target
//   null
//
// Use Util.Script.xxx to access AcquireImages/AcquireScheduler globals, etc.
//
// Return True to permit the target to be acquired by ACP, False will terminate
// the observing run. Return 2 to cause the target to be skipped.
//------------------------------------------------------------------------------
function TargetStart(Plan, Target, NextTarget){
    var Console = Util.Console;
    Console.PrintLine("Custom UserAction for TargetStart called");
    //start donuts if requested
    if (Target.Tags !== null){
        if (Target.Tags.Donuts !== undefined){
            if (Target.Tags.Donuts == "on"){
                var started = startDonuts();
                if (started === ""){
                    Console.PrintLine("**ERR: Failed to start donuts**");
                    return false;
                }
            } else if (Target.Tags.Donuts == "off"){
                var stopped = stopDonuts();
                if (stopped === ""){
                    Console.PrintLine("**ERR: Failed to stop donuts**");
                    return false;
                }
            }
        }
    }
    return true;
}

//------------------------------------------------------------------------------
// TargetEnd() Called from AcquireImages.js or AcquireScheduler when the current
//             target's processing is complete.
//
// Parameters:
//   Plan            ACP.Plan object for currently running plan
//   Target          Current ACP.Target object 
//   NextTarget      Next ACP.Target object Or Null
//
// Parameters (Scheduler):
//   Plan            Scheduler Plan object for currently running plan
//   Target          Scheduler Observation object for target
//   null
//
// Use Util.Script.xxx to access AcquireImages/AcquireScheduler globals, etc.
//
// Return True to permit the script to continue. Returning False will cause the 
// observing run to terminate.
//------------------------------------------------------------------------------
function TargetEnd(Plan, Target, NextTarget){
    return true;
}
]]>
		</script>
	</component>
</package>
